name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CL
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_A }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_A }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 264427725539.dkr.ecr.us-east-1.amazonaws.com
      - name: Build and push frontend Docker image
        run: |
          docker build -t myecr-repo .
          docker tag myecr-repo:latest 264427725539.dkr.ecr.us-east-1.amazonaws.com/myecr-repo:latest
          docker push 264427725539.dkr.ecr.us-east-1.amazonaws.com/myecr-repo:latest

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.AWS_NEW_SSH_KEY }}" > aws-ec2-key.pem
          chmod 600 aws-ec2-key.pem
          ssh -o StrictHostKeyChecking=no -i aws-ec2-key.pem ubuntu@3.91.228.87 << 'EOF'
            set -e
            export AWS_REGION=us-east-1
            REPOSITORY_NAME=myecr-repo
            ECR_URL=264427725539.dkr.ecr.us-east-1.amazonaws.com
            
            # Authenticate Docker with ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL
      
            # Pull the latest image
            docker pull $ECR_URL/$REPOSITORY_NAME:latest
      
            # Stop and remove running containers using the previous image
            docker stop $(docker ps -q --filter ancestor=$ECR_URL/$REPOSITORY_NAME) || true
            docker rm $(docker ps -aq --filter ancestor=$ECR_URL/$REPOSITORY_NAME) || true
      
            # Remove unused local images to save space
            docker images $ECR_URL/$REPOSITORY_NAME | awk 'NR>1 {print $3}' | xargs -r docker rmi
      
            # Delete untagged images from ECR
            UNTAGGED_IMAGES=$(aws ecr list-images --repository-name $REPOSITORY_NAME --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)
            if [ "$UNTAGGED_IMAGES" != "[]" ]; then
              echo "$UNTAGGED_IMAGES" | aws ecr batch-delete-image --repository-name $REPOSITORY_NAME --image-ids file://<(echo "$UNTAGGED_IMAGES")
            fi
      
            # Run the new container
            docker run -d -p 80:5173 -p 3000:3000 -p 5173:5173 --name my-app $ECR_URL/$REPOSITORY_NAME:latest
          EOF

