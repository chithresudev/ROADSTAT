name: CI/CD Pipeline to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'  # Update to your required version

      # Step 3: Build the React application
      - name: Build (React)
        run: |
          npm install --legacy-peer-deps
          CI=false npm run build
        env:
          NODE_ENV: production

      # Step 4: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      # Step 5: Build and tag Docker images for deployment
      - name: Build and tag Docker images
        run: |
          docker build -t roadlorry .
          docker tag roadlorry:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/roadlorry:latest

      # Step 6: Push Docker image to Amazon ECR
      - name: Push Docker images to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/roadlorry:latest

      # Step 7: Deploy the new Docker image to ECS
      - name: Deploy to Amazon ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1
        run: |
          aws ecs update-service --cluster DevCluster --service devclusterservice --force-new-deployment
